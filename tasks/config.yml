---

- name: Ensure goss directory exists
  file:
    path: /etc/goss.d
    mode: 0755
    state: directory
  tags:
    - test_postgres

- name: Copy goss tests template
  template:
    src: test_postgres.yml.j2
    dest: /etc/goss.d/test_postgres.yml
    mode: 0640
  tags:
    - test_postgres

- name: Ensure bash profile exists
  copy:
    dest: /etc/profile.d/postgres.sh
    content: "export PATH=$PATH:/usr/pgsql-{{ base_postgres_m }}/bin"
    mode: 0644
  tags:
    - config
    - bash

- name: Create directory for systemd override
  file:
    path: "/etc/systemd/system/postgresql-{{ base_postgres_m }}.service.d"
    state: directory
    mode: '0755'
  tags:
    - config

- name: Override PGDATA for systemd service
  copy:
    # yamllint disable-line rule:line-length
    dest: "/etc/systemd/system/postgresql-{{ base_postgres_m }}.service.d/override.conf"
    mode: 0640
    content: |
      [Service]
      Environment=PGDATA={{ base_postgres_pgdata }}
  tags:
    - config

- name: Initialize postgresql database
  command: "{{ postgres_setup }} initdb"
  args:
    creates: "{{ base_postgres_pgdata }}/postgresql.conf"
  become: true
  notify: Start postgresql
  # yamllint disable-line rule:line-length
  when: ansible_os_family == 'RedHat'
  tags:
    - install
    - init

- name: Configure pg_hba.conf
  template:
    src: "{{ your_template_path | default() }}pg_hba.conf"
    dest: "{{ base_postgres_pgdata }}/pg_hba.conf"
    backup: false
    owner: postgres
    mode: 0600
  become: true
  notify: Start postgresql
  tags:
    - config
    - replica

- name: Copy start_pg_replica.sh
  template:
    src: start_pg_replica.sh
    dest: /usr/local/bin/start_pg_replica.sh
    backup: false
    owner: root
    mode: 0700
  become: true
  when: base_postgres_role is defined and base_postgres_role == "replica"
  tags:
    - config
    - replica

- name: Unset ip to listen on to ipv4 localhost
  become: true
  lineinfile:
    dest: "{{ base_postgres_pgdata }}/postgresql.conf"
    insertbefore: s'^#listen_addresses'
    line: "listen_addresses = '127.0.0.1'"
    state: absent
  tags:
    - config

- name: Set listen on on ipv4 addresses
  become: true
  lineinfile:
    dest: "{{ base_postgres_pgdata }}/postgresql.conf"
    insertbefore: '^#listen_addresses'
    line: "listen_addresses = '*'"
    state: present

- name: Set replication setting wal_level
  become: true
  lineinfile:
    dest: "{{ base_postgres_pgdata }}/postgresql.conf"
    insertbefore: '^listen_addresses'
    line: "wal_level = hot_standby"
    state: present
  tags:
    - replica

- name: Set replication setting max_wal_senders
  become: true
  lineinfile:
    dest: "{{ base_postgres_pgdata }}/postgresql.conf"
    insertafter: '^#max_wal_senders'
    line: "max_wal_senders = 3"
    state: present
  tags:
    - replica

# - name: Set replication setting: checkpoint_segments
#   become: true
#   lineinfile:
#     dest: "{{ base_postgres_pgdata }}/postgresql.conf"
#     insertafter: '^#checkpoint_segments'
#     line: "checkpoint_segments = 8"
#     state: present
#   tags:
#     - replica

- name: Set replication setting wal_keep_segments
  become: true
  lineinfile:
    dest: "{{ base_postgres_pgdata }}/postgresql.conf"
    insertafter: '^#wal_keep_segments'
    line: "wal_keep_segments = 8"
    state: present
  tags:
    - replica

- name: Set replication setting hot_standby
  become: true
  lineinfile:
    dest: "{{ base_postgres_pgdata }}/postgresql.conf"
    insertafter: '^wal_keep_segments'
    line: "hot_standby = on"
    state: present
  tags:
    - replica

- name: Set replication setting archive_mode
  become: true
  lineinfile:
    dest: "{{ base_postgres_pgdata }}/postgresql.conf"
    insertafter: '^#archive_mode'
    line: "archive_mode = on"
    state: present
  tags:
    - replica

- name: Set replication setting archive_command
  become: true
  lineinfile:
    dest: "{{ base_postgres_pgdata }}/postgresql.conf"
    insertafter: '^#archive_command'
    line: "archive_command = 'cd .'"
    state: present
  tags:
    - replica

- name: Configure ssl
  when:
    - postgresql_ssl is defined
    - postgresql_ssl == 'on'
  include_tasks: ssl.yml

- name: Start postgres
  systemd:
    name: "{{ base_postgres_service }}"
    state: started
    enabled: true
  when: base_postgres_role is undefined or base_postgres_role == "primary"
  tags:
    - config
    - pguser

- name: Initialize the postgresql user
  postgresql_user:
    name: "{{ base_postgres_user }}"
    role_attr_flags: 'SUPERUSER'
  when: base_postgres_role is undefined or base_postgres_role == "primary"
  become: true
  become_user: postgres
  register: create_pg_user
  tags:
    - pguser

- name: Set the password for the postgres user
  postgresql_user:
    name: "{{ base_postgres_user }}"
    password: "{{ base_postgres_pass }}"
  become: true
  become_user: postgres
  when: base_postgres_role is undefined or base_postgres_role == "primary"
  tags:
    - pguser

- name: Create a new database
  postgresql_db:
    name: "{{ base_postgres_user }}"
    lc_collate: 'en_US.UTF-8'
    lc_ctype: 'en_US.UTF-8'
    template: template0

- name: Initialize the replicator user
  become: true
  become_user: postgres
  postgresql_user:
    name: 'replicator'
    role_attr_flags: 'REPLICATION'
    password: "{{ base_postgres_pass }}"
  when: base_postgres_role is undefined or base_postgres_role == "primary"
  tags:
    - pguser
    - replica

- name: Start the replica with the script in /usr/local/bin
  expect:
    command: /usr/local/bin/start_pg_replica.sh
    responses:
      Password: "{{ base_postgres_pass }}"
  when: base_postgres_role is defined and base_postgres_role == "replica"
  tags:
    - replica
    - replica
...
