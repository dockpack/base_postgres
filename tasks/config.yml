---

- name: Copy goss tests templateÂ¬
  template:
    src: postgres_goss.yml
    dest: /root/postgres_goss.yml

- name: 'make sure .bashrc exists'
  become: no
  file:
    path: ~/.bashrc
    state: file
  tags:
    - bash

- name: 'amend path variable'
  lineinfile:
    dest: ~/.bashrc
    line: 'export PATH=$PATH:/usr/pgsql-{{ base_postgres_m }}/bin'
    state: present
  tags:
    - bash

- name: 'make sure .bash_profile exists'
  become: yes
  become_user: postgres
  file:
    path: /var/lib/pgsql/.bash_profile
    state: file
  tags:
    - bash

- name: 'amend path variable'
  become: yes
  become_user: postgres
  lineinfile:
    dest: /var/lib/pgsql/.bash_profile
    line: 'export PATH=$PATH:/usr/pgsql-{{ base_postgres_m }}/bin'
    state: present
  tags:
    - bash

- name: 'init postgresql database'
  command: /etc/init.d/postgresql-{{ base_postgres_m }} initdb
  args:
    creates: /var/lib/pgsql/{{ base_postgres_m }}/data/postgresql.conf
  become: yes
  notify:
    - restart postgresql-{{ base_postgres_m }}
  when: ansible_os_family == 'RedHat' and ansible_distribution_major_version == "6"
  tags:
    - install
    - init

- name: 'init postgresql database'
  command: /usr/pgsql-{{ base_postgres_m }}/bin/postgresql{{ base_postgres_s }}-setup initdb
  args:
    creates: /var/lib/pgsql/{{ base_postgres_m }}/data/postgresql.conf
  become: yes
  notify:
    - restart postgresql-{{ base_postgres_m }}
  when: ansible_os_family == 'RedHat' and ansible_distribution_major_version == "7"
  tags:
    - install
    - init

- name: 'ensure postgresql is running automatically at boot'
  service:
    name: postgresql-{{ base_postgres_m }}
    enabled: yes
  become: yes
  when: ansible_os_family == 'RedHat'
  tags:
    - install

- name: 'configure pg_hba.conf'
  template:
    src: "{{ your_template_path | default() }}pg_hba.conf"
    dest: /var/lib/pgsql/{{ base_postgres_m }}/data/pg_hba.conf
    backup: no
    owner: postgres
  become: yes
  notify:
    - restart postgresql-{{ base_postgres_m }}
  tags:
    - config
    - replica

- name: 'copy start_pg_slave.sh'
  template:
    src: start_pg_slave.sh
    dest: /usr/local/bin/start_pg_slave.sh
    backup: no
    owner: root
    mode: 0700
  become: yes
  when: base_postgres_role is defined and base_postgres_role == "slave"
  tags:
    - config
    - replica

- name: 'unset ip to listen on to ipv4 localhost'
  become: yes
  lineinfile:
    dest: /var/lib/pgsql/{{ base_postgres_m }}/data/postgresql.conf
    insertbefore: s'^#listen_addresses'
    line: "listen_addresses = '127.0.0.1'"
    state: absent
  tags:
    - config

- name: 'see if iptables file exists'
  stat:
    path: /etc/sysconfig/iptables
  register: iptables

- name: 'fix "postgresql" in /etc/sysconfig/iptables file'
  become: yes
  lineinfile:
    dest: /etc/sysconfig/iptables
    line: '-A INPUT -p tcp -m tcp --dport 5432 -j ACCEPT'
    state: present
    insertbefore: ^COMMIT
  notify: restart iptables
  when: iptables is defined and iptables.stat.exists
  tags:
    - config
    - iptables

- name: 'set listen on on ipv4 addresses'
  become: yes
  lineinfile:
    dest: /var/lib/pgsql/{{ base_postgres_m }}/data/postgresql.conf
    insertbefore: '^#listen_addresses'
    line: "listen_addresses = '*'"
    state: present

- name: 'set replication setting: wal_level'
  become: yes
  lineinfile:
    dest: /var/lib/pgsql/{{ base_postgres_m }}/data/postgresql.conf
    insertbefore: '^listen_addresses'
    line: "wal_level = hot_standby"
    state: present
  tags:
    - replica

- name: 'set replication setting: max_wal_senders'
  become: yes
  lineinfile:
    dest: /var/lib/pgsql/{{ base_postgres_m }}/data/postgresql.conf
    insertafter: '^#max_wal_senders'
    line: "max_wal_senders = 3"
    state: present
  tags:
    - replica

#- name: 'set replication setting: checkpoint_segments'
#  become: yes
#  lineinfile:
#    dest: /var/lib/pgsql/{{ base_postgres_m }}/data/postgresql.conf
#    insertafter: '^#checkpoint_segments'
#    line: "checkpoint_segments = 8"
#    state: present
#  tags:
#    - replica

- name: 'set replication setting: wal_keep_segments'
  become: yes
  lineinfile:
    dest: /var/lib/pgsql/{{ base_postgres_m }}/data/postgresql.conf
    insertafter: '^#wal_keep_segments'
    line: "wal_keep_segments = 8"
    state: present
  tags:
    - replica

- name: 'set replication setting: hot_standby'
  become: yes
  lineinfile:
    dest: /var/lib/pgsql/{{ base_postgres_m }}/data/postgresql.conf
    insertafter: '^wal_keep_segments'
    line: "hot_standby = on"
    state: present
  tags:
    - replica

- name: 'set replication setting: archive_mode'
  become: yes
  lineinfile:
    dest: /var/lib/pgsql/{{ base_postgres_m }}/data/postgresql.conf
    insertafter: '^#archive_mode'
    line: "archive_mode = on"
    state: present
  tags:
    - replica

- name: 'set replication setting: archive_command'
  become: yes
  lineinfile:
    dest: /var/lib/pgsql/{{ base_postgres_m }}/data/postgresql.conf
    insertafter: '^#archive_command'
    line: "archive_command = 'cd .'"
    state: present
  tags:
    - replica

- name: 'startup postgres'
  service:
    name: postgresql-{{ base_postgres_m }}
    state: started
  when: base_postgres_role is undefined or base_postgres_role == "master"
  tags:
    - config
    - pguser

- name: 'initialize the postgresql user'
  postgresql_user:
    name: "{{ base_postgres_user }}"
    role_attr_flags: 'CREATEDB,CREATEROLE'
  when: base_postgres_role is undefined or base_postgres_role == "master"
  become: yes
  become_user: postgres
  register: create_pg_user
  tags:
    - pguser

- name: 'set the password for the postgres user'
  postgresql_user:
    name: "{{ base_postgres_user }}"
    password: "{{ base_postgres_pass }}"
  become: yes
  become_user: postgres
  when: base_postgres_role is undefined or base_postgres_role == "master"
  tags:
    - pguser

- name: 'initialize the replicator user'
  become: yes
  become_user: postgres
  postgresql_user:
    name: 'replicator'
    role_attr_flags: 'REPLICATION'
    password: "{{ base_postgres_pass }}"
  when: base_postgres_role is undefined or base_postgres_role == "master"
  tags:
    - pguser
    - replica

- name: 'start the slave with the script in /usr/local/bin'
  expect:
    command: /usr/local/bin/start_pg_slave.sh
    responses:
      Password: "{{ base_postgres_pass }}"
  when: base_postgres_role is defined and base_postgres_role == "slave"
  tags:
    - replica
    - startslave
